
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  phone: 'phone',
  firstName: 'firstName',
  lastName: 'lastName',
  profileImage: 'profileImage',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive',
  preferredStoreId: 'preferredStoreId',
  lastLocationLat: 'lastLocationLat',
  lastLocationLng: 'lastLocationLng',
  emailVerified: 'emailVerified',
  phoneVerified: 'phoneVerified'
};

exports.Prisma.StoreScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country',
  latitude: 'latitude',
  longitude: 'longitude',
  phone: 'phone',
  email: 'email',
  openingHours: 'openingHours',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  storeImage: 'storeImage',
  deliveryRadius: 'deliveryRadius',
  minOrderAmount: 'minOrderAmount'
};

exports.Prisma.StoreManagerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  storeId: 'storeId',
  role: 'role',
  permissions: 'permissions',
  createdAt: 'createdAt',
  isActive: 'isActive'
};

exports.Prisma.StoreInventoryScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  productId: 'productId',
  quantityAvailable: 'quantityAvailable',
  reservedQuantity: 'reservedQuantity',
  reorderLevel: 'reorderLevel',
  maxStockLevel: 'maxStockLevel',
  lastRestocked: 'lastRestocked',
  isAvailable: 'isAvailable',
  priceOverride: 'priceOverride',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryReservationScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  productId: 'productId',
  quantity: 'quantity',
  userId: 'userId',
  orderId: 'orderId',
  status: 'status',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShoppingCartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  storeId: 'storeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  productId: 'productId',
  quantity: 'quantity',
  priceAtTime: 'priceAtTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  userId: 'userId',
  storeId: 'storeId',
  status: 'status',
  totalAmount: 'totalAmount',
  taxAmount: 'taxAmount',
  deliveryFee: 'deliveryFee',
  discountAmount: 'discountAmount',
  paymentMethod: 'paymentMethod',
  paymentStatus: 'paymentStatus',
  deliveryType: 'deliveryType',
  deliveryAddress: 'deliveryAddress',
  estimatedPickupTime: 'estimatedPickupTime',
  actualPickupTime: 'actualPickupTime',
  specialInstructions: 'specialInstructions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  productName: 'productName',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  specialInstructions: 'specialInstructions'
};

exports.Prisma.UserAddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country',
  latitude: 'latitude',
  longitude: 'longitude',
  isDefault: 'isDefault',
  createdAt: 'createdAt'
};

exports.Prisma.DeviceTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  deviceId: 'deviceId',
  platform: 'platform',
  token: 'token',
  createdAt: 'createdAt',
  isActive: 'isActive'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionToken: 'sessionToken',
  deviceType: 'deviceType',
  deviceId: 'deviceId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  isActive: 'isActive'
};

exports.Prisma.PushNotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  storeId: 'storeId',
  title: 'title',
  message: 'message',
  type: 'type',
  data: 'data',
  sentAt: 'sentAt',
  readAt: 'readAt',
  isRead: 'isRead'
};

exports.Prisma.IdempotencyKeyScalarFieldEnum = {
  id: 'id',
  key: 'key',
  userId: 'userId',
  requestHash: 'requestHash',
  response: 'response',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  strapiId: 'strapiId',
  name: 'name',
  slug: 'slug',
  description: 'description',
  image: 'image',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  strapiId: 'strapiId',
  name: 'name',
  slug: 'slug',
  description: 'description',
  sku: 'sku',
  price: 'price',
  currency: 'currency',
  images: 'images',
  isActive: 'isActive',
  featured: 'featured',
  publishedAt: 'publishedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  categoryId: 'categoryId'
};

exports.Prisma.BannerScalarFieldEnum = {
  id: 'id',
  strapiId: 'strapiId',
  title: 'title',
  description: 'description',
  image: 'image',
  link: 'link',
  isActive: 'isActive',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PromotionScalarFieldEnum = {
  id: 'id',
  strapiId: 'strapiId',
  name: 'name',
  description: 'description',
  discountType: 'discountType',
  discountValue: 'discountValue',
  minOrderAmount: 'minOrderAmount',
  maxDiscountAmount: 'maxDiscountAmount',
  code: 'code',
  isActive: 'isActive',
  startDate: 'startDate',
  endDate: 'endDate',
  applicableProducts: 'applicableProducts',
  applicableCategories: 'applicableCategories',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.ReservationStatus = exports.$Enums.ReservationStatus = {
  reserved: 'reserved',
  used: 'used',
  released: 'released',
  expired: 'expired',
  cancelled: 'cancelled'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  pending: 'pending',
  confirmed: 'confirmed',
  preparing: 'preparing',
  ready: 'ready',
  completed: 'completed',
  cancelled: 'cancelled'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  pending: 'pending',
  paid: 'paid',
  failed: 'failed',
  refunded: 'refunded'
};

exports.DeliveryType = exports.$Enums.DeliveryType = {
  pickup: 'pickup',
  delivery: 'delivery'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  order_update: 'order_update',
  promotion: 'promotion',
  general: 'general'
};

exports.IdempotencyStatus = exports.$Enums.IdempotencyStatus = {
  in_progress: 'in_progress',
  completed: 'completed',
  failed: 'failed'
};

exports.Prisma.ModelName = {
  User: 'User',
  Store: 'Store',
  StoreManager: 'StoreManager',
  StoreInventory: 'StoreInventory',
  InventoryReservation: 'InventoryReservation',
  ShoppingCart: 'ShoppingCart',
  CartItem: 'CartItem',
  Order: 'Order',
  OrderItem: 'OrderItem',
  UserAddress: 'UserAddress',
  DeviceToken: 'DeviceToken',
  UserSession: 'UserSession',
  PushNotification: 'PushNotification',
  IdempotencyKey: 'IdempotencyKey',
  Category: 'Category',
  Product: 'Product',
  Banner: 'Banner',
  Promotion: 'Promotion'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
