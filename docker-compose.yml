version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ecom-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ecom
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./migrations_sql:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ecom-redis
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main Application
  app:
    build: .
    container_name: ecom-app
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ecom?schema=public
      REDIS_URL: redis://redis:6379
      PORT: 4000
      JWT_ACCESS_SECRET: your-super-secret-access-key-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
      ACCESS_TOKEN_EXPIRES_IN: 15m
      REFRESH_TOKEN_EXPIRES_IN: 30d
      WEBHOOK_SECRET: your-webhook-secret-for-hmac-verification
      STRAPI_BASE_URL: https://your-strapi-instance.com
      STRAPI_WEBHOOK_SECRET: your-strapi-webhook-secret
      RESERVATION_TTL_MINUTES: 15
      RATE_LIMIT_WINDOW_MS: 60000
      RATE_LIMIT_MAX_REQUESTS: 120
      AUTH_RATE_LIMIT_WINDOW_MS: 900000
      AUTH_RATE_LIMIT_MAX_ATTEMPTS: 10
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./migrations_sql:/app/migrations_sql
    command: npm run dev
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Admin Interface
  adminer:
    image: adminer:4.8.1
    container_name: ecom-adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres

  # Redis Commander (Redis Admin)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ecom-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis

volumes:
  pgdata:
  redisdata:
