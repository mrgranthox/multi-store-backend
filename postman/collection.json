{
  "info": {
    "name": "Multi-Store E-commerce API",
    "description": "Complete API collection for the multi-store e-commerce backend",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:4000",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "storeId",
      "value": "",
      "type": "string"
    },
    {
      "key": "orderId",
      "value": "",
      "type": "string"
    },
    {
      "key": "cartId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"phone\": \"+1234567890\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.data.tokens.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.data.tokens.refreshToken);",
                  "    pm.collectionVariables.set('userId', response.data.user.id);",
                  "    pm.test('User registered successfully', () => {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.user.email).to.eql('test@example.com');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.data.tokens.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.data.tokens.refreshToken);",
                  "    pm.collectionVariables.set('userId', response.data.user.id);",
                  "    pm.test('User logged in successfully', () => {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.tokens.accessToken).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/refresh-token",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "refresh-token"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.data.tokens.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.data.tokens.refreshToken);",
                  "    pm.test('Token refreshed successfully', () => {",
                  "        pm.expect(response.success).to.be.true;",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "profile"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Profile retrieved successfully', () => {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.user).to.exist;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Stores",
      "item": [
        {
          "name": "Get Nearby Stores",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/stores/nearby?latitude=40.7589&longitude=-73.9851&radius=10&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["api", "stores", "nearby"],
              "query": [
                {
                  "key": "latitude",
                  "value": "40.7589"
                },
                {
                  "key": "longitude",
                  "value": "-73.9851"
                },
                {
                  "key": "radius",
                  "value": "10"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('storeId', response.data.stores[0]?.id || '');",
                  "    pm.test('Nearby stores retrieved successfully', () => {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.stores).to.be.an('array');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Store Details",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/stores/{{storeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "stores", "{{storeId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Store details retrieved successfully', () => {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.store).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Store Availability",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/stores/{{storeId}}/availability",
              "host": ["{{baseUrl}}"],
              "path": ["api", "stores", "{{storeId}}", "availability"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Store availability retrieved successfully', () => {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.availability).to.exist;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "Get Products",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/products?storeId={{storeId}}&limit=25",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"],
              "query": [
                {
                  "key": "storeId",
                  "value": "{{storeId}}"
                },
                {
                  "key": "limit",
                  "value": "25"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Products retrieved successfully', () => {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.products).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Search Products",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/products/search?q=banana&storeId={{storeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "banana"
                },
                {
                  "key": "storeId",
                  "value": "{{storeId}}"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Product search completed successfully', () => {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.products).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Featured Products",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/products/featured?storeId={{storeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "featured"],
              "query": [
                {
                  "key": "storeId",
                  "value": "{{storeId}}"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Featured products retrieved successfully', () => {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.products).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Shopping Cart",
      "item": [
        {
          "name": "Get Cart",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/cart?storeId={{storeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cart"],
              "query": [
                {
                  "key": "storeId",
                  "value": "{{storeId}}"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Cart retrieved successfully', () => {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Add Item to Cart",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"1\",\n  \"quantity\": 2,\n  \"storeId\": \"{{storeId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/cart/items",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cart", "items"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('cartId', response.data.cart?.id || '');",
                  "    pm.test('Item added to cart successfully', () => {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.cart).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Cart Item",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 3\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/cart/items/{{cartItemId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cart", "items", "{{cartItemId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Cart item updated successfully', () => {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Apply Promo Code",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"WELCOME10\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/cart/promo-code?storeId={{storeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cart", "promo-code"],
              "query": [
                {
                  "key": "storeId",
                  "value": "{{storeId}}"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Promo code processed', () => {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Orders",
      "item": [
        {
          "name": "Create Order",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Idempotency-Key",
                "value": "{{$randomUUID}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"storeId\": \"{{storeId}}\",\n  \"deliveryType\": \"delivery\",\n  \"deliveryAddress\": {\n    \"title\": \"Home\",\n    \"addressLine1\": \"123 Main Street\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"USA\"\n  },\n  \"specialInstructions\": \"Please ring doorbell\",\n  \"paymentMethod\": \"credit_card\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('orderId', response.data.order.id);",
                  "    pm.test('Order created successfully', () => {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.order).to.exist;",
                  "        pm.expect(response.data.order.orderNumber).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Order by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "{{orderId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Order retrieved successfully', () => {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.order).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Orders",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/orders/user?limit=20&offset=0",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "user"],
              "query": [
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User orders retrieved successfully', () => {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.orders).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Cancel Order",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}/cancel",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "{{orderId}}", "cancel"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Order cancelled successfully', () => {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Webhooks",
      "item": [
        {
          "name": "Inventory Updated Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Hook-Signature",
                "value": "test-signature"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"id\": 1,\n    \"attributes\": {\n      \"productId\": \"prod_1\",\n      \"storeId\": \"{{storeId}}\",\n      \"quantityAvailable\": 50,\n      \"reservedQuantity\": 5,\n      \"isAvailable\": true,\n      \"priceOverride\": 2.99\n    }\n  },\n  \"event\": \"entry.update\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/webhooks/inventory-updated",
              "host": ["{{baseUrl}}"],
              "path": ["webhooks", "inventory-updated"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Inventory webhook processed successfully', () => {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Product Updated Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Hook-Signature",
                "value": "test-signature"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"id\": 1,\n    \"attributes\": {\n      \"name\": \"Updated Product Name\",\n      \"description\": \"Updated description\",\n      \"price\": 9.99,\n      \"sku\": \"UPDATED-SKU\",\n      \"isActive\": true,\n      \"featured\": false\n    }\n  },\n  \"event\": \"entry.update\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/webhooks/product-updated",
              "host": ["{{baseUrl}}"],
              "path": ["webhooks", "product-updated"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Product webhook processed successfully', () => {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Webhook Health Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/webhooks/health",
              "host": ["{{baseUrl}}"],
              "path": ["webhooks", "health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Webhook health check passed', () => {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Health Check",
      "item": [
        {
          "name": "API Health Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('API is healthy', () => {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.message).to.eql('Server is healthy');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
